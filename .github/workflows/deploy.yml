name: 构建文档
# 触发条件
on:
  push:
    branches: [production]  # 当代码推送到 production 分支时触发
  workflow_dispatch:    # 允许在 GitHub Actions 页面手动触发
# 权限设置
permissions:
  contents: write     # 读写仓库内容
  pages: write       # 写入 GitHub Pages
  id-token: write    # 生成 JWT 令牌用于身份验证
# 并发控制
concurrency:
  group: pages       # 同一时间只允许一个部署运行
  cancel-in-progress: false # 不取消正在进行的部署

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
        - name: 切换分支🀄
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: 使用 pnpm☂
          uses: pnpm/action-setup@v3
          with:
            version: 9

        - name: 使用 node:20🌠
          uses: actions/setup-node@v2
          with:
            node-version: 20

        - name: 配置 Pages
          uses: actions/configure-pages@v4

        - name: 安装 依赖❄
          run: pnpm install

        - name: 构建项目(GitHub Pages 版本)🚽
          run: |
            echo "构建 GitHub Pages 版本 (base: /ElakeDocs/)"
            pnpm run build
            mv .vitepress/dist .vitepress/dist-ghpages
            ls -la .vitepress/dist-ghpages

        - name: 构建项目(服务器版本)🚽
          run: |
            echo "构建服务器版本 (base: /)"
            # 备份原始配置
            cp .vitepress/config.js .vitepress/config.js.bak
            # 修改配置为根路径
            sed -i "s|base: '/ElakeDocs/'|base: '/'|g" .vitepress/config.js
            # 显示修改后的配置确认
            echo "修改后的配置内容:"
            grep "base:" .vitepress/config.js || true
            # 执行构建
            pnpm run build || (echo "构建失败, 显示错误日志"; cat .vitepress/build.log; exit 1)
            # 恢复原始配置
            mv .vitepress/config.js.bak .vitepress/config.js
            # 确认构建产物
            echo "构建产物内容:"
            ls -la .vitepress/dist

        - name: 上传到 GitHub Pages📦
          uses: actions/upload-pages-artifact@v3
          with:
            path: .vitepress/dist-ghpages
            
        - name: 保存产物到 artifacts 分支📦
          run: |
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"

            if ! git fetch origin artifacts 2>/dev/null; then
              echo "创建新的artifacts分支"
              git checkout --orphan artifacts
              git rm -rf .
            else
              echo "检出现有的artifacts分支"
              git checkout artifacts
              git rm -rf .
            fi

            cp -r .vitepress/dist/* .
            git add .
            git commit -m "Update artifacts from production branch (Build $GITHUB_RUN_ID)"
            git push origin artifacts --force

  # 部署任务
    deploy:
        environment:
          name: github-pages
          url: ${{ steps.deployment.outputs.page_url }}
        needs: build
        runs-on: ubuntu-latest
        steps:
          - name: 部署到 GitHub Pages📦
            id: deployment
            uses: actions/deploy-pages@v4
