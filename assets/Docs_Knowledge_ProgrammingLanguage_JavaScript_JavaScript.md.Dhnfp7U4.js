import{_ as s,C as e,c as n,o as t,a6 as i,b as c,w as r,a as g,G as p,a7 as d}from"./chunks/framework.BQ10fS7j.js";const u=JSON.parse('{"title":"前言","description":"","frontmatter":{},"headers":[],"relativePath":"Docs/Knowledge/ProgrammingLanguage/JavaScript/JavaScript.md","filePath":"Docs/Knowledge/ProgrammingLanguage/JavaScript/JavaScript.md","lastUpdated":1742722027000}'),l={name:"Docs/Knowledge/ProgrammingLanguage/JavaScript/JavaScript.md"};function S(J,a,v,A,m,E){const o=e("Mermaid");return t(),n("div",null,[a[1]||(a[1]=i('<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p><strong>JS</strong>全称<strong>JavaScript</strong>, 是一门跨平台, 面向对象的脚本语言, 它能使网页可交互(例如拥有复杂的动画, 可点击的按钮, 通俗的菜单等)</p><p>另外还有高级的服务端<strong>JS</strong>版本例如<strong>Node.js</strong>, 它可以让你在网页上添加更多功能, 不仅仅是下载文件(例如在多台电脑之间的协同合作).在宿主环境(例如web浏览器)中, <strong>JS</strong>能够通过其所连接的环境提供的编程接口进行控制</p><p><strong>JS</strong>内置了一些对象的标准库, 比如数组(<code>Array</code>), 日期(<code>Date</code>), 数学(<code>Math</code>)和一套核心语句, 包括运算符, 流程控制符以及声明方式等.<strong>JS</strong>的核心部分可以通过添加对象来扩展语言以适应不同用途, 例如:</p><ul><li>客户端的<strong>JS</strong>通过提供对象, 控制浏览器及其文档对象模型(DOM), 来扩展语言核心.例如:客户端的拓展代码允许应用程序将元素放在某个HTML表单中, 并且支持响应用户事件, 比如鼠标点击, 表单提交和页面导航</li><li>服务端的<strong>JS</strong>则通过提供有关在服务器上运行<strong>JS</strong>的对象来可扩展语言核心.例如:服务端版本直接支持应用和数据库通信, 提供应用不同调用间的信息连续性, 或者在服务器上执行文件操作</li></ul><p>这意味着, 在浏览器中, <strong>JS</strong>可以改变网页(DOM)的外观与样式.同样地, 在服务器上, <strong>Node.js</strong>中的<strong>JS</strong>可以对浏览器上编写的代码发出的客户端请求做出响应</p><h2 id="javascript和java" tabindex="-1">JavaScript和Java <a class="header-anchor" href="#javascript和java" aria-label="Permalink to &quot;JavaScript和Java&quot;">​</a></h2><p><strong>JavaScript</strong>和<strong>Java</strong>有一些共性, 但是在另一些方面有着根本性区别.<strong>JavaScript</strong>语言类似<strong>Java</strong>但是并没有<strong>Java</strong>的静态类型和强类型检查特性.<strong>JavaScript</strong>遵循了<strong>Java</strong>的表达式语法, 命名规范以及基础流程控制, 这也是<strong>JavaScript</strong>从<strong>LiveScript</strong>更名的原因.(除了上面说的共性外<strong>JavaScript</strong>和<strong>Java</strong>仅仅只是蹭热度的关系)</p><p>Ps:说了这么多, 反正只用知道, 这两B玩意没任何关系, 名字也只是因为历史原因冲突的</p><h2 id="javascript的组成" tabindex="-1">JavaScript的组成 <a class="header-anchor" href="#javascript的组成" aria-label="Permalink to &quot;JavaScript的组成&quot;">​</a></h2><h3 id="ecmascript" tabindex="-1">ECMAScript <a class="header-anchor" href="#ecmascript" aria-label="Permalink to &quot;ECMAScript&quot;">​</a></h3><p>规定了<strong>JS</strong>基础语法核心知识</p><p>比如:变量, 分支语法, 循环语法, 对象等等</p><h3 id="web-apis" tabindex="-1">Web APIs: <a class="header-anchor" href="#web-apis" aria-label="Permalink to &quot;Web APIs:&quot;">​</a></h3><p>DOM 操作文档, 比如对页面元素进行移动, 大小, 添加删除等操作</p><p>BOM 操作浏览器, 比如页面弹窗, 检测窗口宽度, 存储数据到浏览器等等</p>',16)),(t(),c(d,null,{default:r(()=>[p(o,{id:"mermaid-57",class:"mermaid",graph:"flowchart%20TD%3B%20JS%5BJavaScript%5D%3BJS%20--%3E%20%7CJavaScript%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%7C%20ECMAScript%3BJS%20--%3E%20WebAPI%5BWeb%20APIs%5D%3BWebAPI%20--%3E%20%7C%E9%A1%B5%E9%9D%A2%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%7C%20DOM%3BWebAPI%20--%3E%20%7C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%7C%20BOM%0A"})]),fallback:r(()=>a[0]||(a[0]=[g(" Loading... ")])),_:1}))])}const B=s(l,[["render",S]]);export{u as __pageData,B as default};
