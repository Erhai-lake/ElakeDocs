import{_ as a,c as i,o as e,a6 as n}from"./chunks/framework.X-bX-Y7_.js";const c=JSON.parse('{"title":"变量","description":"","frontmatter":{},"headers":[],"relativePath":"Docs/Knowledge/ProgrammingLanguage/JavaScript/Variable.md","filePath":"Docs/Knowledge/ProgrammingLanguage/JavaScript/Variable.md","lastUpdated":1752160215000}'),l={name:"Docs/Knowledge/ProgrammingLanguage/JavaScript/Variable.md"};function t(p,s,h,r,d,o){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h1><h2 id="变量的本质" tabindex="-1">变量的本质 <a class="header-anchor" href="#变量的本质" aria-label="Permalink to &quot;变量的本质&quot;">​</a></h2><p>白话:变量就是一个装东西的盒子</p><p>通俗:变量是计算机中用来<strong>存储数据</strong>的<strong>容器</strong>, 他可以让计算机有记忆</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p>变量不是数据本身, 它们仅仅是一个用于存储数值的容器.可以理解为是一个个用来装东西的纸箱子</p></div><p>也就是说, 变量的本质, 是程序在内存中申请一块用来存放数据的空间</p><h2 id="变量的基本使用" tabindex="-1">变量的基本使用 <a class="header-anchor" href="#变量的基本使用" aria-label="Permalink to &quot;变量的基本使用&quot;">​</a></h2><h3 id="声明变量" tabindex="-1">声明变量 <a class="header-anchor" href="#声明变量" aria-label="Permalink to &quot;声明变量&quot;">​</a></h3><p>要使用变量, 首页要声明变量(也称创建变量, 定义变量)</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>声明变量有两部分组成:声明关键词, 变量名</p><p>这里<code>var</code>和<code>let</code>是声明关键词, <code>a</code>和<code>b</code>是变量名</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p>现在请把<code>var</code>忘掉, 统一使用<code>let</code>进行声明</p></div><h3 id="变量赋值" tabindex="-1">变量赋值 <a class="header-anchor" href="#变量赋值" aria-label="Permalink to &quot;变量赋值&quot;">​</a></h3><p>声明一个变量后, 可以初始化变量, 在变量名后面跟一个<code>=</code>就可以赋值了</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 114514</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当然除了以上的方法, 还可以在声明变量时顺便赋值</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 114514</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="使用变量" tabindex="-1">使用变量 <a class="header-anchor" href="#使用变量" aria-label="Permalink to &quot;使用变量&quot;">​</a></h3><p>直接使用变量名即可</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 114514</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="更新变量" tabindex="-1">更新变量 <a class="header-anchor" href="#更新变量" aria-label="Permalink to &quot;更新变量&quot;">​</a></h3><p>如果要更新已有变量的值, 像给变量初始化时一样赋值</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 114514</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (test)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 更新变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1919810</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果重复声明变量, 会报错, 如下</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 114514</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1919810</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果使用<code>var</code>就不会报错, 但是请不要使用他</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p>常量一旦初始化, 无法在更新</p></div><h3 id="扩展-同时声明多个变量" tabindex="-1">扩展:同时声明多个变量 <a class="header-anchor" href="#扩展-同时声明多个变量" aria-label="Permalink to &quot;扩展:同时声明多个变量&quot;">​</a></h3><p>声明变量时, 多个变量之间使用<code>, </code>隔开即可, 例如:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;第一个变量&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, test2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;第二个变量&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test1, test2)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>看上去代码长度更短, 但是并<strong>不推荐</strong>这样写, 会降低代码可读性</p><h2 id="变量命名的规则与规范" tabindex="-1">变量命名的规则与规范 <a class="header-anchor" href="#变量命名的规则与规范" aria-label="Permalink to &quot;变量命名的规则与规范&quot;">​</a></h2><p>规则:必须遵守的, 不遵守会报错(法律层面)</p><p>规范:建议, 不遵守不会报错, 但不符合业内通识(道德层面)</p><ol><li>规则 <ol><li>不能使用关键字(有特殊含义的字符, JS中内置的一些词汇.例如:<code>let</code>, <code>if</code>, <code>for</code>等)</li><li>只能使用下划线, 字母, 数字, $组成, 且开头不能为数字</li><li>字母严格<strong>区分大小写</strong>.例如:Age和age是不同的变量</li></ol></li><li>规范 <ol><li>起名要有意义</li><li>遵循驼峰命名法 <ol><li>小驼峰:第一个单词首字母小写, 后面每个单词首字母大写.例如:<code>userName</code></li><li>大驼峰:每个单词首字母都大写.例如:<code>UserName</code></li></ol></li></ol></li></ol><h2 id="let与var的区别" tabindex="-1">let与var的区别 <a class="header-anchor" href="#let与var的区别" aria-label="Permalink to &quot;let与var的区别&quot;">​</a></h2><p>在老程序中, 是使用关键字<code>var</code>来声明变量, 而不是<code>let</code></p><p><code>var</code>在现在开发中已经不在使用了</p><p><code>let</code>的存在是为了解决<code>var</code>的一些列问题的, 如下</p><ul><li><code>var</code>可以先使用在声明(不合理)</li><li><code>var</code>声明过的变量可以重复声明(不合理)</li><li><code>var</code>无法做到变量提升, 全局变量, 也没有块级作用域等功能</li></ul><p>综上所述, <strong><code>var</code>的存在就是的个Bug, 别迷恋它了, 它不喜欢你的, 声明变量统一</strong></p>`,42)]))}const g=a(l,[["render",t]]);export{c as __pageData,g as default};
