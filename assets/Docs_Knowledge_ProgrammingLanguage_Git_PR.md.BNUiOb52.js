import{_ as c,c as d,o as t,a6 as o}from"./chunks/framework.Du9XbX32.js";const s="/ElakeDocs/assets/008a210b19d2b6a9840f1d503ef48d6d50ed357c.CdDPLgbM.png",l="/ElakeDocs/assets/979e4f21c2a7d5ba338647aca424def0ccc090b9.OqjIjd9N.png",b="/ElakeDocs/assets/e5eba5b9355cf464632c2f78d41374b9c39fe6bd.DKjaDAy1.png",p="/ElakeDocs/assets/ef32a0ef1c5b435331d716b88311592f88220d45.CfeC2azx.png",f="/ElakeDocs/assets/88616700980b8a814dca348617e324a71814ed21.pzkKmkxV.png",r="/ElakeDocs/assets/8a2e91ecd5f6a6e4e94fa93dcea14dbd645bd1f0.DnEV0DuW.png",i="/ElakeDocs/assets/314079c28e6eec3a4a450a49767ebc0856be89ba.BhUAikkt.png",n="/ElakeDocs/assets/0d246043a10ee9c8df59febf5f5d07c57a58be91.VglVy8Gx.png",g="/ElakeDocs/assets/8b38a6c26f5e26fcf30fc1e05ca2ca3ed93d906a.CbEZAC2W.png",y="/ElakeDocs/assets/e13a02d7a04a18a87f2dff62418a99eaab3def68.BJ-AGA7t.png",m="/ElakeDocs/assets/fa834742ce5c8dee0cd93d2fcb7ae08d7a943031.98emMCXt.png",h="/ElakeDocs/assets/bcaa22f989841822e1d73dc079416cf8fe5fc8b6.BXMA7L_N.png",_="/ElakeDocs/assets/1b8d1d139913ec409acf49b9eb08077e4bda7c95.BkBnV-l9.png",P="/ElakeDocs/assets/51d96cbc3d7f7ad5688f62171fc709b636ffac5e.CWvKpSIC.png",k="/ElakeDocs/assets/9e57d6456b2c05a9208f1ebb4801f3e5cf970145.CGYOwZ4m.png",u="/ElakeDocs/assets/0f89070c9686cca532b21d8065a4be3c4eac37c6.BtH19j5o.png",D="/ElakeDocs/assets/a564f94b5230d4af5df2964e7ceb4e5df3fff00b.CPfM-lGC.png",x="/ElakeDocs/assets/c92c02e32e7037d39f12e7b9559090e4974400a7.BoCbOvFV.png",E="/ElakeDocs/assets/3c0ba74b39a8e635a13c49f0bb7e2da665343d58.DrzPkk_o.png",q="/ElakeDocs/assets/15fc4bb12ad1e12403dc0cb8c7c0fe4d4a503155.DboAm1a6.png",R="/ElakeDocs/assets/5f413c3b4c2a7bc5de19e244e1be6e317b2fdfc3.B9Ix6KJJ.png",z="/ElakeDocs/assets/55c3a453c62ba01882b48005233d3468b9cb246c.DAvlTS8H.png",G="/ElakeDocs/assets/db6f0cca1d3fa9bf7f5236e5c6f44c3540685713.DQEhOWKK.png",e="/ElakeDocs/assets/a02d1355cf6149436b2ec09693bffcc8598bd795.DAYUXQql.png",A="/ElakeDocs/assets/c38b3a404b60dbdc08f698b89bb0ec2b8f538478.CnmLSXGa.png",B="/ElakeDocs/assets/21e2a4c657888dc92466838d574e9f8b22d7d51c.k4aRI6NV.png",M="/ElakeDocs/assets/4f6e2ab144f5d508e57ac2218d19f6e23795fe3e.BytqIVtI.png",C="/ElakeDocs/assets/0b7db9e6f9b5b2b70eb728aabc4d70dd04680b2e.DKUp2fNE.png",V="/ElakeDocs/assets/df4edefbcd42c5aafc1c8e53fe9fb65614fa7e51.Cas-io-A.png",I="/ElakeDocs/assets/c7efcfaf69b3c84b5628473deeb0888d108a452a.BBVgFaXz.png",S="/ElakeDocs/assets/b7b051c084ac0c1e67efffd2cd81c9d9dbf37a4c.BNp9_ywt.png",W="/ElakeDocs/assets/e9acef5c40b387a01d4eec9e3ad377dde3fd1594.DdefERVq.png",H="/ElakeDocs/assets/cada5c8c5cbc1a1cd50d503df9edabfd70d61b21.DoZEMrwO.png",K="/ElakeDocs/assets/a5c1f6d2e7270ff14517f4f5099669bcc7500bf9.Ds7UfIoY.png",N="/ElakeDocs/assets/3bb9475711bb3d547e96cfc91f162714de8afe9e.EW_N4A4C.png",T="/ElakeDocs/assets/9b126dc68db8f238baa662a1ebdf8e4925d9fdaa.DGLVJjPW.png",v="/ElakeDocs/assets/7bbb203719c992e845bbbf8f21b1ba7fbcd8e751.DZEamC-q.png",w="/ElakeDocs/assets/7c7a17534a2ddc0e56eccbc13c488c22daf3dc20.CgVqnWNQ.png",L="/ElakeDocs/assets/6c8a62eff7826e74e2e053662a603091bf02666b.CcPPoAiw.png",j="/ElakeDocs/assets/e99f82e63739dfc03f7c07655c91bbc1e28bafb3.Dk_Bj7Dx.png",J="/ElakeDocs/assets/402b591bddf761e03ad51ec142775669a1e9ade2.CYonAWIL.png",O="/ElakeDocs/assets/5f60a79eab5ba39d08e612bca4e66cd62787e063.By8srCsq.png",U="/ElakeDocs/assets/4e1b73d37de17a89b104234a0951aa40764f9450.yMgqjyXg.png",X="/ElakeDocs/assets/108e7c2ad61a06c65e575643f3029e2388f48012.BcneUp-w.png",Y="/ElakeDocs/assets/ba14f0cae3c23fd8d8dadfdd198ceca1bb91b744.1BqTSEkp.png",F="/ElakeDocs/assets/b892acaf4fb8b7d1a69d716d1051777ffa80241c.BKVhORvi.png",Z="/ElakeDocs/assets/8e9fbf6db5a36a68fbb0921e745613aeca4205be.DESuvsy6.png",$="/ElakeDocs/assets/a60beab3b96f49c33987e7e92204a35790b399d7.DHmHV_Pc.png",Q="/ElakeDocs/assets/ef3ef958f745cb987851d2c76c63c4de9672d017.BXhVa85F.png",aa="/ElakeDocs/assets/a91d10efa25dd795561cc6a32a672ef4ec7b2512.NiJ73xFi.png",ea="/ElakeDocs/assets/5c71dc43f1a35824f3aef91fe07a8b8d6c7f6943.gB6oJS6A.png",fa=JSON.parse('{"title":"提交或同意PR","description":"","frontmatter":{},"headers":[],"relativePath":"Docs/Knowledge/ProgrammingLanguage/Git/PR.md","filePath":"Docs/Knowledge/ProgrammingLanguage/Git/PR.md","lastUpdated":1742722027000}'),ca={name:"Docs/Knowledge/ProgrammingLanguage/Git/PR.md"};function da(ta,a,oa,sa,la,ba){return t(),d("div",null,a[0]||(a[0]=[o('<h1 id="提交或同意pr" tabindex="-1">提交或同意PR <a class="header-anchor" href="#提交或同意pr" aria-label="Permalink to &quot;提交或同意PR&quot;">​</a></h1><blockquote><p>为了写这篇文档, 我快精神分裂了()</p></blockquote><p>PR全称<strong>Pull Request</strong>, 用于为对方的代码提交自己的贡献, 例如修复BUG, 优化性能, 新功能等</p><p>这篇文章将使用两个仓库账号进行演示, 方便演示从提交到同意</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p>提交PR前, 请检查是否已经有PR或者Issues了, 尽量不要重复提交</p></div><h2 id="github" tabindex="-1">GitHub <a class="header-anchor" href="#github" aria-label="Permalink to &quot;GitHub&quot;">​</a></h2><h3 id="对方-初始化仓库" tabindex="-1">(对方)初始化仓库 <a class="header-anchor" href="#对方-初始化仓库" aria-label="Permalink to &quot;(对方)初始化仓库&quot;">​</a></h3><p>初始化一个新的仓库, 作为教程演示, 这里为了方便, 就直接在GitHub里新建了</p><p><img src="'+s+'" alt="008a210b19d2b6a9840f1d503ef48d6d50ed357c" data-fancybox="gallery" loading="lazy"></p><p><img src="'+l+'" alt="979e4f21c2a7d5ba338647aca424def0ccc090b9" data-fancybox="gallery" loading="lazy"></p><p><img src="'+b+'" alt="e5eba5b9355cf464632c2f78d41374b9c39fe6bd" data-fancybox="gallery" loading="lazy"></p><h3 id="己方-复刻仓库" tabindex="-1">(己方)复刻仓库 <a class="header-anchor" href="#己方-复刻仓库" aria-label="Permalink to &quot;(己方)复刻仓库&quot;">​</a></h3><p>从这一步开始, 就正式进入提交PR的步骤了</p><p><img src="'+p+'" alt="ef32a0ef1c5b435331d716b88311592f88220d45" data-fancybox="gallery" loading="lazy"></p><p><img src="'+f+'" alt="88616700980b8a814dca348617e324a71814ed21" data-fancybox="gallery" loading="lazy"></p><p>复刻仓库后, 会自动跳转到自己的仓库</p><h3 id="己方-克隆仓库" tabindex="-1">(己方)克隆仓库 <a class="header-anchor" href="#己方-克隆仓库" aria-label="Permalink to &quot;(己方)克隆仓库&quot;">​</a></h3><p>复制复刻到自己仓库的SSH链接</p><p>在Git中输入<code>git clone git@github.com:Erhai-lake/Test.git</code></p><p><img src="'+r+'" alt="8a2e91ecd5f6a6e4e94fa93dcea14dbd645bd1f0" data-fancybox="gallery" loading="lazy"></p><h3 id="己方-新建并切换分支" tabindex="-1">(己方)新建并切换分支 <a class="header-anchor" href="#己方-新建并切换分支" aria-label="Permalink to &quot;(己方)新建并切换分支&quot;">​</a></h3><p>禁止直接在主分支更改内容, 分支的命名尽量简洁, 并与解决的问题相关</p><p>在Git中输入<code>git checkout -b ModifyREADME</code></p><p><img src="'+i+'" alt="314079c28e6eec3a4a450a49767ebc0856be89ba" data-fancybox="gallery" loading="lazy"></p><h3 id="己方-编辑代码" tabindex="-1">(己方)编辑代码 <a class="header-anchor" href="#己方-编辑代码" aria-label="Permalink to &quot;(己方)编辑代码&quot;">​</a></h3><p>这里修改README文件, 并新建文本文件作为例子</p><p><img src="'+n+'" alt="0d246043a10ee9c8df59febf5f5d07c57a58be91" data-fancybox="gallery" loading="lazy"></p><p>每个人都会有自己的代码风格, 到底是用制表符(Tab)还是空格(Space)?每行是80字符还是120字符?这种圣战不应该在PR中出现, PR应该遵循项目已有的风格.例如:如果原来使用的驼峰命名变量, PR中就应该使用驼峰命名, 否则有80%的几率会被驳回</p><h3 id="己方-提交并同步代码到仓库" tabindex="-1">(己方)提交并同步代码到仓库 <a class="header-anchor" href="#己方-提交并同步代码到仓库" aria-label="Permalink to &quot;(己方)提交并同步代码到仓库&quot;">​</a></h3><p>将修改完的代码同步到GitHub仓库</p><p>在Git中输入<code>git add .</code></p><p>在Git中输入<code>git commit -m &quot;修改了README文件, 并新建了文本文件&quot;</code></p><p>在Git中输入<code>git push --set-upstream origin ModifyREADME</code></p><p><img src="'+g+'" alt="8b38a6c26f5e26fcf30fc1e05ca2ca3ed93d906a" data-fancybox="gallery" loading="lazy"></p><h3 id="己方-提交pr" tabindex="-1">(己方)提交PR <a class="header-anchor" href="#己方-提交pr" aria-label="Permalink to &quot;(己方)提交PR&quot;">​</a></h3><p>回到线上仓库</p><p><img src="'+y+'" alt="e13a02d7a04a18a87f2dff62418a99eaab3def68" data-fancybox="gallery" loading="lazy"></p><p><img src="'+m+'" alt="fa834742ce5c8dee0cd93d2fcb7ae08d7a943031" data-fancybox="gallery" loading="lazy"></p><p><img src="'+h+'" alt="bcaa22f989841822e1d73dc079416cf8fe5fc8b6" data-fancybox="gallery" loading="lazy"></p><p>如果对方仓库有说明PR的描述格式, 请优先按照格式书写描述!</p><p>可以看见你提交的PR已经躺在这里等待处理了(处不处理看对方心情(不是))</p><p><img src="'+_+'" alt="1b8d1d139913ec409acf49b9eb08077e4bda7c95" data-fancybox="gallery" loading="lazy"></p><p>点进去可以看见详细信息</p><p><img src="'+P+'" alt="51d96cbc3d7f7ad5688f62171fc709b636ffac5e" data-fancybox="gallery" loading="lazy"></p><p>如果PR改动很大, 你想边改边得到别人及时的反馈, 可以先创建PR后, 在标题上加上**[WIP]<strong>是Work In Progress的缩写, 表示工作还未完成.但尽量不要把未完成的PR提交到别人的项目上(可能会引起别人反感), 通常</strong>WIP**的PR都是自己的项目里面使用就行了</p><h3 id="对方-驳回pr" tabindex="-1">(对方)驳回PR <a class="header-anchor" href="#对方-驳回pr" aria-label="Permalink to &quot;(对方)驳回PR&quot;">​</a></h3><p><img src="'+k+'" alt="9e57d6456b2c05a9208f1ebb4801f3e5cf970145" data-fancybox="gallery" loading="lazy"></p><p>如果这里点了同意, 那就合并了, 同步一下本地仓库就完事了</p><p>如果不满意, 或者有其他需求, 请说明告知</p><p><img src="'+u+'" alt="0f89070c9686cca532b21d8065a4be3c4eac37c6" data-fancybox="gallery" loading="lazy"></p><h3 id="己方-按照对方的要求修改代码" tabindex="-1">(己方)按照对方的要求修改代码 <a class="header-anchor" href="#己方-按照对方的要求修改代码" aria-label="Permalink to &quot;(己方)按照对方的要求修改代码&quot;">​</a></h3><p>如果你收到了对方发的消息, 例如:</p><p><img src="'+D+'" alt="a564f94b5230d4af5df2964e7ceb4e5df3fff00b" data-fancybox="gallery" loading="lazy"></p><p>你可以在心里暗骂一声:<code>BYD, 要求还挺多</code>, 然后根据对方的想法修改代码, 或者在下方发送评论</p><p><img src="'+x+'" alt="c92c02e32e7037d39f12e7b9559090e4974400a7" data-fancybox="gallery" loading="lazy"></p><p>被迫修改了代码, 然后提交并同步至仓库</p><p>同步后会自动同步到PR</p><p><img src="'+E+'" alt="3c0ba74b39a8e635a13c49f0bb7e2da665343d58" data-fancybox="gallery" loading="lazy"></p><p>在正常的PR中, 可能要改好几次, 请放平心态, 一切都是为了开源精神</p><h3 id="对方-同意pr" tabindex="-1">(对方)同意PR <a class="header-anchor" href="#对方-同意pr" aria-label="Permalink to &quot;(对方)同意PR&quot;">​</a></h3><p><img src="'+q+'" alt="15fc4bb12ad1e12403dc0cb8c7c0fe4d4a503155" data-fancybox="gallery" loading="lazy"></p><p><img src="'+R+'" alt="5f413c3b4c2a7bc5de19e244e1be6e317b2fdfc3" data-fancybox="gallery" loading="lazy"></p><h3 id="双方-pr状态" tabindex="-1">(双方)PR状态 <a class="header-anchor" href="#双方-pr状态" aria-label="Permalink to &quot;(双方)PR状态&quot;">​</a></h3><p>在对方同意合并后, PR界面会自动关闭, 并显示已合并</p><p><img src="'+z+'" alt="55c3a453c62ba01882b48005233d3468b9cb246c" data-fancybox="gallery" loading="lazy"></p><p>在项目主页, 会显示贡献者</p><p><img src="'+G+'" alt="db6f0cca1d3fa9bf7f5236e5c6f44c3540685713" data-fancybox="gallery" loading="lazy"></p><h3 id="对方-同步本地仓库" tabindex="-1">(对方)同步本地仓库 <a class="header-anchor" href="#对方-同步本地仓库" aria-label="Permalink to &quot;(对方)同步本地仓库&quot;">​</a></h3><p>将远程仓库同步到本地仓库</p><p>在Git中输入<code>git pull</code></p><p><img src="'+e+'" alt="a02d1355cf6149436b2ec09693bffcc8598bd795" data-fancybox="gallery" loading="lazy"></p><h3 id="己方-删除复刻的仓库" tabindex="-1">(己方)删除复刻的仓库 <a class="header-anchor" href="#己方-删除复刻的仓库" aria-label="Permalink to &quot;(己方)删除复刻的仓库&quot;">​</a></h3><p>这一步不是必须的, 只是保持一个规范的开源协作习惯, 减少意外提交错误项目分支的情况发生</p><p>来到对方项目主页, 找到之前已经合并的提交请求(在关闭的PR列表中), 点击 Delete branch</p><p><img src="'+A+'" alt="c38b3a404b60dbdc08f698b89bb0ec2b8f538478" data-fancybox="gallery" loading="lazy"></p><p><img src="'+B+'" alt="21e2a4c657888dc92466838d574e9f8b22d7d51c" data-fancybox="gallery" loading="lazy"></p><p>删除本地分支</p><p>在Git中输入<code>git branch -d ModifyREADME</code></p><p>下次交PR前, 先更新本地仓库, 在重复以上步骤</p><p>在Git中输入<code>git pull</code></p><h2 id="gitee" tabindex="-1">Gitee <a class="header-anchor" href="#gitee" aria-label="Permalink to &quot;Gitee&quot;">​</a></h2><h3 id="对方-初始化仓库-1" tabindex="-1">(对方)初始化仓库 <a class="header-anchor" href="#对方-初始化仓库-1" aria-label="Permalink to &quot;(对方)初始化仓库&quot;">​</a></h3><p>由于懒得在注册一个Gitee账号了, 所以这里偷柒月的来耍耍</p><p>初始化一个新的仓库, 作为教程演示, 这里为了方便, 就直接在Gitee里新建了</p><p><img src="'+M+'" alt="4f6e2ab144f5d508e57ac2218d19f6e23795fe3e" data-fancybox="gallery" loading="lazy"></p><p><img src="'+C+'" alt="0b7db9e6f9b5b2b70eb728aabc4d70dd04680b2e" data-fancybox="gallery" loading="lazy"></p><p><img src="'+V+'" alt="df4edefbcd42c5aafc1c8e53fe9fb65614fa7e51" data-fancybox="gallery" loading="lazy"></p><h3 id="己方-复刻仓库-1" tabindex="-1">(己方)复刻仓库 <a class="header-anchor" href="#己方-复刻仓库-1" aria-label="Permalink to &quot;(己方)复刻仓库&quot;">​</a></h3><p>从这一步开始, 就正式进入提交PR的步骤了</p><p><img src="'+I+'" alt="c7efcfaf69b3c84b5628473deeb0888d108a452a" data-fancybox="gallery" loading="lazy"></p><p>复刻仓库后, 会自动跳转到自己的仓库</p><h3 id="己方-克隆仓库-1" tabindex="-1">(己方)克隆仓库 <a class="header-anchor" href="#己方-克隆仓库-1" aria-label="Permalink to &quot;(己方)克隆仓库&quot;">​</a></h3><p>复制复刻到自己仓库的SSH链接</p><p>在Git中输入<code>git clone git@gitee.com:erhai-lake/test.git</code></p><p><img src="'+S+'" alt="b7b051c084ac0c1e67efffd2cd81c9d9dbf37a4c" data-fancybox="gallery" loading="lazy"></p><h3 id="己方-新建并切换分支-1" tabindex="-1">(己方)新建并切换分支 <a class="header-anchor" href="#己方-新建并切换分支-1" aria-label="Permalink to &quot;(己方)新建并切换分支&quot;">​</a></h3><p>禁止直接在主分支更改内容, 分支的命名尽量简洁, 并与解决的问题相关</p><p>在Git中输入<code>git checkout -b ModifyREADME</code></p><p><img src="'+W+'" alt="e9acef5c40b387a01d4eec9e3ad377dde3fd1594" data-fancybox="gallery" loading="lazy"></p><h3 id="己方-编辑代码-1" tabindex="-1">(己方)编辑代码 <a class="header-anchor" href="#己方-编辑代码-1" aria-label="Permalink to &quot;(己方)编辑代码&quot;">​</a></h3><p>这里修改README文件, 并删除README.en</p><p><img src="'+H+'" alt="cada5c8c5cbc1a1cd50d503df9edabfd70d61b21" data-fancybox="gallery" loading="lazy"></p><p>每个人都会有自己的代码风格, 到底是用制表符(Tab)还是空格(Space)?每行是80字符还是120字符?这种圣战不应该在PR中出现, PR应该遵循项目已有的风格.例如:如果原来使用的驼峰命名变量, PR中就应该使用驼峰命名, 否则有80%的几率会被驳回</p><h3 id="己方-提交并同步代码到仓库-1" tabindex="-1">(己方)提交并同步代码到仓库 <a class="header-anchor" href="#己方-提交并同步代码到仓库-1" aria-label="Permalink to &quot;(己方)提交并同步代码到仓库&quot;">​</a></h3><p>将修改完的代码同步到GitHub仓库</p><p>在Git中输入<code>git add .</code></p><p>在Git中输入<code>git commit -m &quot;修改了README文件, 并删除了README.en文件&quot;</code></p><p>在Git中输入<code>git push --set-upstream origin ModifyREADME</code></p><p><img src="'+K+'" alt="a5c1f6d2e7270ff14517f4f5099669bcc7500bf9" data-fancybox="gallery" loading="lazy"></p><h3 id="己方-提交pr-1" tabindex="-1">(己方)提交PR <a class="header-anchor" href="#己方-提交pr-1" aria-label="Permalink to &quot;(己方)提交PR&quot;">​</a></h3><p>回到线上仓库</p><p><img src="'+N+'" alt="3bb9475711bb3d547e96cfc91f162714de8afe9e" data-fancybox="gallery" loading="lazy"></p><p><img src="'+T+'" alt="9b126dc68db8f238baa662a1ebdf8e4925d9fdaa" data-fancybox="gallery" loading="lazy"></p><p><img src="'+v+'" alt="7bbb203719c992e845bbbf8f21b1ba7fbcd8e751" data-fancybox="gallery" loading="lazy"></p><p>如果对方仓库有说明PR的描述格式, 请优先按照格式书写描述!</p><p>可以看见你提交的PR已经躺在这里等待处理了(处不处理看对方心情(不是))</p><p><img src="'+w+'" alt="7c7a17534a2ddc0e56eccbc13c488c22daf3dc20" data-fancybox="gallery" loading="lazy"></p><p>点进去可以看见详细信息</p><p><img src="'+L+'" alt="6c8a62eff7826e74e2e053662a603091bf02666b" data-fancybox="gallery" loading="lazy"></p><p>如果PR改动很大, 你想边改边得到别人及时的反馈, 可以先创建PR后, 在标题上加上**[WIP]<strong>是Work In Progress的缩写, 表示工作还未完成.但尽量不要把未完成的PR提交到别人的项目上(可能会引起别人反感), 通常</strong>WIP**的PR都是自己的项目里面使用就行了</p><h3 id="对方-驳回pr-1" tabindex="-1">(对方)驳回PR <a class="header-anchor" href="#对方-驳回pr-1" aria-label="Permalink to &quot;(对方)驳回PR&quot;">​</a></h3><p><img src="'+j+'" alt="e99f82e63739dfc03f7c07655c91bbc1e28bafb3" data-fancybox="gallery" loading="lazy"></p><p>如果这里通过了两个测试, 并点击了合并, 那就合并了, 同步一下本地仓库就完事了</p><p>如果不满意, 或者有其他需求, 请说明告知</p><p><img src="'+J+'" alt="402b591bddf761e03ad51ec142775669a1e9ade2" data-fancybox="gallery" loading="lazy"></p><h3 id="己方-按照对方的要求修改代码-1" tabindex="-1">(己方)按照对方的要求修改代码 <a class="header-anchor" href="#己方-按照对方的要求修改代码-1" aria-label="Permalink to &quot;(己方)按照对方的要求修改代码&quot;">​</a></h3><p>如果你收到了对方发的消息, 例如:</p><p><img src="'+O+'" alt="5f60a79eab5ba39d08e612bca4e66cd62787e063" data-fancybox="gallery" loading="lazy"></p><p>你可以在心里暗骂一声:<code>BYD, 要求还挺多</code>, 然后根据对方的想法修改代码, 或者在下方发送评论</p><p><img src="'+U+'" alt="4e1b73d37de17a89b104234a0951aa40764f9450" data-fancybox="gallery" loading="lazy"></p><p>被迫修改了代码, 然后提交并同步至仓库</p><p>同步后会自动同步到PR</p><p><img src="'+X+'" alt="108e7c2ad61a06c65e575643f3029e2388f48012" data-fancybox="gallery" loading="lazy"></p><p>在正常的PR中, 可能要改好几次, 请放平心态, 一切都是为了开源精神</p><h3 id="对方-同意pr-1" tabindex="-1">(对方)同意PR <a class="header-anchor" href="#对方-同意pr-1" aria-label="Permalink to &quot;(对方)同意PR&quot;">​</a></h3><p><img src="'+Y+'" alt="ba14f0cae3c23fd8d8dadfdd198ceca1bb91b744" data-fancybox="gallery" loading="lazy"></p><p><img src="'+F+'" alt="b892acaf4fb8b7d1a69d716d1051777ffa80241c" data-fancybox="gallery" loading="lazy"></p><h3 id="双方-pr状态-1" tabindex="-1">(双方)PR状态 <a class="header-anchor" href="#双方-pr状态-1" aria-label="Permalink to &quot;(双方)PR状态&quot;">​</a></h3><p>在对方同意合并后, PR界面会自动关闭, 并显示已合并</p><p><img src="'+Z+'" alt="8e9fbf6db5a36a68fbb0921e745613aeca4205be" data-fancybox="gallery" loading="lazy"></p><p>在项目主页, 会显示贡献者</p><p><img src="'+$+'" alt="a60beab3b96f49c33987e7e92204a35790b399d7" data-fancybox="gallery" loading="lazy"></p><h3 id="对方-同步本地仓库-1" tabindex="-1">(对方)同步本地仓库 <a class="header-anchor" href="#对方-同步本地仓库-1" aria-label="Permalink to &quot;(对方)同步本地仓库&quot;">​</a></h3><p>将远程仓库同步到本地仓库</p><p>在Git中输入<code>git pull</code></p><p><img src="'+e+'" alt="a02d1355cf6149436b2ec09693bffcc8598bd795" data-fancybox="gallery" loading="lazy"></p><h3 id="己方-删除复刻的仓库-1" tabindex="-1">(己方)删除复刻的仓库 <a class="header-anchor" href="#己方-删除复刻的仓库-1" aria-label="Permalink to &quot;(己方)删除复刻的仓库&quot;">​</a></h3><p>这一步不是必须的, 只是保持一个规范的开源协作习惯, 减少意外提交错误项目分支的情况发生</p><p>来到对方项目主页, 找到之前已经合并的提交请求(在关闭的PR列表中), 点击 Delete branch</p><p><img src="'+Q+'" alt="ef3ef958f745cb987851d2c76c63c4de9672d017" data-fancybox="gallery" loading="lazy"></p><p><img src="'+aa+'" alt="a91d10efa25dd795561cc6a32a672ef4ec7b2512" data-fancybox="gallery" loading="lazy"></p><p><img src="'+ea+'" alt="5c71dc43f1a35824f3aef91fe07a8b8d6c7f6943" data-fancybox="gallery" loading="lazy"></p><p>删除本地分支</p><p>在Git中输入<code>git branch -d ModifyREADME</code></p><p>下次交PR前, 先更新本地仓库, 在重复以上步骤</p><p>在Git中输入<code>git pull</code></p>',156)]))}const ra=c(ca,[["render",da]]);export{fa as __pageData,ra as default};
