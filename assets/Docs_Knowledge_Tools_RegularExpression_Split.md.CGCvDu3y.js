import{_ as o,c as d,o as c,a6 as a}from"./chunks/framework.X-bX-Y7_.js";const p="/assets/3314a35fd30b5ea670f3ee5b080720c6d74ee4ee.Di55Ir-T.png",l="/assets/85252a87a019ebd280a5f1915b13eaccaf3f7a46.BU7f7f61.png",t="/assets/3304d962a37802dfff24547dec811b8670ac997c.lHkIso9w.png",r="/assets/e0313681b3725ee1c6dd496545de4d1f2db77dab.C--YlWjB.png",s="/assets/797e20f8a50fd822d0d1a0cbfcfb78ce40698d94.DcD_2iYX.png",i="/assets/ae7c0c7971a39e157aa6d2e62c26dde45be12f94.D2bHXWbY.png",x=JSON.parse('{"title":"拆分","description":"","frontmatter":{},"headers":[],"relativePath":"Docs/Knowledge/Tools/RegularExpression/Split.md","filePath":"Docs/Knowledge/Tools/RegularExpression/Split.md","lastUpdated":1754243091000}'),n={name:"Docs/Knowledge/Tools/RegularExpression/Split.md"};function b(f,e,g,h,m,_){return c(),d("div",null,e[0]||(e[0]=[a('<h1 id="拆分" tabindex="-1">拆分 <a class="header-anchor" href="#拆分" aria-label="Permalink to &quot;拆分&quot;">​</a></h1><p>对于一门语言的掌握程度怎么样, 可以有两个角度来衡量:读和写</p><p>不仅要求自己能解决问题, 还要看懂别人的解决方案.代码是这样, 正则表达式也是这样</p><p>正则这门语言跟其他语言有一点不同, 它通常就是一大堆字符, 而没有所谓<strong>语句</strong>的概念</p><p>如何能正确地把一大串正则拆分成一块一块的, 成为了破解“天书”的关键</p><h2 id="结构和操作符" tabindex="-1">结构和操作符 <a class="header-anchor" href="#结构和操作符" aria-label="Permalink to &quot;结构和操作符&quot;">​</a></h2><p>编程语言一般都有操作符.只要有操作符, 就会出现一个问题.当一大堆操作在一起时, 先操作谁, 又后操作谁呢?为了不产生歧义, 就需要语言本身定义好操作顺序, 即所谓的优先级</p><p>而在正则表达式中, 操作符都体现在结构中, 即由特殊字符和普通字符所代表的一个个特殊整体</p><p>具体含义简要回顾如下(如懂, 可以略去不看):</p><p><strong>字面量</strong>, 匹配一个具体字符, 包括不用转义的和需要转义的.比如a匹配字符<code>a</code>, 又比如<code>\\n</code>匹配换行符, 又比如<code>\\.</code>匹配小数点</p><p><strong>字符组</strong>, 匹配一个字符, 可以是多种可能之一, 比如<code>[0-9]</code>, 表示匹配一个数字。也有<code>\\d</code>的简写形式。另外还有反义字符组, 表示可以是除了特定字符之外任何一个字符, 比如<code>[^0-9]</code>, 表示一个非数字字符, 也有<code>\\D</code>的简写形式</p><p><strong>量词</strong>, 表示一个字符连续出现, 比如<code>a{1,3}</code>表示“a”字符连续出现3次。另外还有常见的简写形式, 比如<code>a+</code>表示“a”字符连续出现至少一次</p><p><strong>锚点</strong>, 匹配一个位置, 而不是字符。比如^匹配字符串的开头, 又比如<code>\\b</code>匹配单词边界, 又比如<code>(?=\\d)</code>表示数字前面的位置</p><p><strong>分组</strong>, 用括号表示一个整体, 比如<code>(ab)+</code>, 表示<code>ab</code>两个字符连续出现多次, 也可以使用非捕获分组<code>(?:ab)+</code></p><p><strong>分支</strong>, 多个子表达式多选一, 比如<code>abc|bcd</code>, 表达式匹配<code>abc</code>或者<code>bcd</code>字符子串</p><p><strong>反向引用</strong>, 比如<code>\\2</code>, 表示引用第2个分组</p><p>其中涉及到的操作符有:</p><ol><li>转义符: <code>\\</code></li><li>括号和方括号: <code>(...)</code>, <code>(?:...)</code>, <code>(?=...)</code>, <code>(?!...)</code>, <code>[...]</code></li><li>量词限定符: <code>{m}</code>, <code>{m, n}</code>, <code>{m, }</code>, <code>?</code>, <code>*</code>, <code>+</code></li><li>位置和序列: <code>^</code> , <code>$</code>, <code>\\元字符</code>, <code>一般字符</code></li><li>管道符(竖杠): <code>|</code></li></ol><p>上面操作符的优先级从上至下, 由高到低</p><p>这里, 我们来分析一个正则:</p><p><code>/ab?(c|de*)+|fg/</code></p><ol><li>由于括号的存在, 所以, <code>(c|de*)</code>是一个整体结构</li><li>在<code>(c|de*)</code>中, 注意其中的量词<code>*</code>, 因此<code>e*</code>是一个整体结构</li><li>又因为分支结构<code>|</code>优先级最低, 因此<code>c</code>是一个整体, 而<code>de*</code>是另一个整体</li><li>同理, 整个正则分成了 <code>a</code>, <code>b?</code>, <code>(...)+</code>, <code>f</code>, <code>g</code>.而由于分支的原因, 又可以分成<code>ab?(c|de*)+</code>和<code>fg</code>这两部分</li></ol><p>希望你没被我绕晕, 上面的分析可用其可视化形式描述如下:</p><p><img src="'+p+'" alt="3314a35fd30b5ea670f3ee5b080720c6d74ee4ee" data-fancybox="gallery" loading="lazy"></p><h2 id="注意要点" tabindex="-1">注意要点 <a class="header-anchor" href="#注意要点" aria-label="Permalink to &quot;注意要点&quot;">​</a></h2><p>关于结构和操作符, 还是有几点需要强调:</p><h3 id="匹配字符串整体问题" tabindex="-1">匹配字符串整体问题 <a class="header-anchor" href="#匹配字符串整体问题" aria-label="Permalink to &quot;匹配字符串整体问题&quot;">​</a></h3><p>因为是要匹配整个字符串, 我们经常会在正则前后中加上锚字符<code>^</code>和<code>$</code></p><p>比如要匹配目标字符串<code>abc</code>或者<code>bcd</code>时, 如果一不小心, 就会写成<code>/^abc|bcd$/</code></p><p>而位置字符和字符序列优先级要比竖杠高, 故其匹配的结构是:</p><p><img src="'+l+'" alt="85252a87a019ebd280a5f1915b13eaccaf3f7a46" data-fancybox="gallery" loading="lazy"></p><p>应该修改成:</p><p><img src="'+t+'" alt="3304d962a37802dfff24547dec811b8670ac997c" data-fancybox="gallery" loading="lazy"></p><h3 id="量词连缀问题" tabindex="-1">量词连缀问题 <a class="header-anchor" href="#量词连缀问题" aria-label="Permalink to &quot;量词连缀问题&quot;">​</a></h3><p>假设, 要匹配这样的字符串:</p><ol><li>每个字符为a, b, c任选其一</li><li>字符串的长度是3的倍数</li></ol><p>此时正则不能想当然地写成<code>/^[abc]{3}+$/</code>, 这样会报错, 说<code>+</code>前面没什么可重复的:</p><p>此时要修改成:</p><p><img src="'+r+'" alt="e0313681b3725ee1c6dd496545de4d1f2db77dab" data-fancybox="gallery" loading="lazy"></p><h3 id="元字符转义问题" tabindex="-1">元字符转义问题 <a class="header-anchor" href="#元字符转义问题" aria-label="Permalink to &quot;元字符转义问题&quot;">​</a></h3><p>所谓元字符, 就是正则中有特殊含义的字符</p><p>所有结构里, 用到的元字符总结如下:</p><p><code>^</code>, <code>$</code>, <code>.</code>, <code>*</code>, <code>+</code>, <code>?</code>, <code>|</code>, <code>\\</code>, <code>/</code>, <code>(</code>, <code>)</code>, <code>[</code>, <code>]</code>, <code>{</code>, <code>}</code>, <code>=</code>, <code>!</code>, <code>:</code>, <code>-</code>, <code>, </code></p><p>当匹配上面的字符本身时,可以一律转义:</p><p><code>/\\^\\$\\.\\*\\+\\?\\|\\\\\\/\\[\\]\\{\\}\\=\\!\\:\\-\\,/</code></p><p>其中<code>string</code>中的<code>\\</code>字符也要转义的</p><p>另外, 在<code>string</code>中, 也可以把每个字符转义, 当然, 转义后的结果仍是本身</p><p><code>\\^\\$\\.\\*\\+\\?\\|\\\\\\/\\[\\]\\{\\}\\=\\!\\:\\-\\,</code></p><p>现在的问题是, 是不是每个字符都需要转义呢?否, 看情况</p><h4 id="字符组中的元字符" tabindex="-1">字符组中的元字符 <a class="header-anchor" href="#字符组中的元字符" aria-label="Permalink to &quot;字符组中的元字符&quot;">​</a></h4><p>跟字符组相关的元字符有<code>[]</code>, <code>^</code>, <code>-</code>.因此在会引起歧义的地方进行转义.例如开头的<code>^</code>必须转义, 不然会把整个字符组, 看成反义字符组</p><p><code>/[\\^$.*+?|\\\\/\\[\\]{}=!:\\-,]/</code></p><h4 id="匹配-abc-和-3-5" tabindex="-1">匹配<code>[abc]</code>和<code>{3,5}</code> <a class="header-anchor" href="#匹配-abc-和-3-5" aria-label="Permalink to &quot;匹配`[abc]`和`{3,5}`&quot;">​</a></h4><p>我们知道<code>[abc]</code>, 是个字符组.如果要匹配字符串<code>[abc]</code>时, 该怎么办?</p><p>可以写成<code>/\\[abc\\]/</code>, 也可以写成<code>/\\[abc]/</code>, 测试如下:</p><p><code>/\\[abc]/</code></p><p><img src="'+s+'" alt="797e20f8a50fd822d0d1a0cbfcfb78ce40698d94" data-fancybox="gallery" loading="lazy"></p><p>只需要在第一个方括号转义即可, 因为后面的方括号构不成字符组, 正则不会引发歧义, 自然不需要转义</p><p>同理, 要匹配字符串<code>{3,5}</code>, 只需要把正则写成<code>/\\{3,5}/</code>即可</p><p>另外, 我们知道量词有简写形式<code>{m,}</code>, 却没有<code>{,n}</code>的情况.虽然后者不构成量词的形式, 但此时并不会报错.当然, 匹配的字符串也是<code>{,n}</code>, 测试如下:</p><p><code>/{,3}/</code></p><p><img src="'+i+'" alt="ae7c0c7971a39e157aa6d2e62c26dde45be12f94" data-fancybox="gallery" loading="lazy"></p><h4 id="其余情况" tabindex="-1">其余情况 <a class="header-anchor" href="#其余情况" aria-label="Permalink to &quot;其余情况&quot;">​</a></h4><p>比如<code>=</code>, <code>!</code>, <code>:</code>, <code>-</code>, <code>,</code>等符号, 只要不在特殊结构中, 也不需要转义</p><p>但是, 括号需要前后都转义的, 如<code>/\\(123\\)/</code></p><p>至于剩下的<code>^</code>, <code>$</code>, <code>.</code>, <code>*</code>, <code>+</code>, <code>?</code>, <code>|</code>, <code>\\</code>, <code>/</code>等字符, 只要不在字符组内, 都需要转义的</p>',66)]))}const q=o(n,[["render",b]]);export{x as __pageData,q as default};
