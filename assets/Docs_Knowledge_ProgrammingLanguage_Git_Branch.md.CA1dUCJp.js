import{_ as e,c as l,o as i,a6 as t}from"./chunks/framework.BQ10fS7j.js";const o="/assets/91f0a7691c990105ce2edc25a76362a6693f0c9c.nPt-M0SQ.png",m=JSON.parse('{"title":"分支","description":"","frontmatter":{},"headers":[],"relativePath":"Docs/Knowledge/ProgrammingLanguage/Git/Branch.md","filePath":"Docs/Knowledge/ProgrammingLanguage/Git/Branch.md","lastUpdated":1742722027000}'),r={name:"Docs/Knowledge/ProgrammingLanguage/Git/Branch.md"};function c(d,a,n,p,h,s){return i(),l("div",null,a[0]||(a[0]=[t('<h1 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h1><p>凡乎所有的版本控制系统都以某种形式支持分支.使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改, 开发新的功能, 以免影响开发主线</p><h2 id="查看分支列表" tabindex="-1">查看分支列表 <a class="header-anchor" href="#查看分支列表" aria-label="Permalink to &quot;查看分支列表&quot;">​</a></h2><p>列出现有的分支列表</p><p><code>git branch</code></p><h2 id="新建分支" tabindex="-1">新建分支 <a class="header-anchor" href="#新建分支" aria-label="Permalink to &quot;新建分支&quot;">​</a></h2><p>创建一个新的分支</p><p><code>git branch 分支名</code></p><h2 id="切换分支" tabindex="-1">切换分支 <a class="header-anchor" href="#切换分支" aria-label="Permalink to &quot;切换分支&quot;">​</a></h2><p>切换当前分支</p><p><code>git checkout 要切换分支名</code></p><p>创建并切换分支</p><p><code>git checkout -b 分支名</code></p><h2 id="删除分支" tabindex="-1">删除分支 <a class="header-anchor" href="#删除分支" aria-label="Permalink to &quot;删除分支&quot;">​</a></h2><p>不能删除当前分支, 只能删除其他分支</p><p><code>git branch -d 分支名</code>删除分支时, 需要做检查, 防止误操作</p><p><code>git branch -D 分支名</code>删除分支时, 不做检查, 强制删除</p><h2 id="合并分支" tabindex="-1">合并分支 <a class="header-anchor" href="#合并分支" aria-label="Permalink to &quot;合并分支&quot;">​</a></h2><p>当前分支和另一个分支进行合并</p><p><code>git merge 分支名</code></p><h2 id="解决合并冲突" tabindex="-1">解决合并冲突 <a class="header-anchor" href="#解决合并冲突" aria-label="Permalink to &quot;解决合并冲突&quot;">​</a></h2><p>当两个分支上对文件的修改可能会存在冲突, 例如同时修改了同一个文件的同一行, 这时就需要手动解决冲突, 解决冲突步骤如下:</p><ol><li>处理文件中冲突的地方 <ol><li>手动打开文件</li><li>找到有冲突的地方</li><li>删除不需要的内容</li></ol></li><li>将解决完冲突的文件加入暂存区(add)</li><li>提交到仓库(commit)</li></ol><h2 id="开发中分支使用原则与流程" tabindex="-1">开发中分支使用原则与流程 <a class="header-anchor" href="#开发中分支使用原则与流程" aria-label="Permalink to &quot;开发中分支使用原则与流程&quot;">​</a></h2><p>几乎所有的版本控制系统都以某种形式支持分支.使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改, 开发新的功能, 以免影响开发主线.</p><p>在开发中, 一般有如下分支使用原则与流程:</p><ul><li>master <ul><li>生产分支</li><li>线上分支, 主分支, 中小规模项目作为线上运行的应用对应的分支</li></ul></li><li>develop <ul><li>开发分支</li><li>是从 master 创建的分支, 一般作为开发部门的主要开发分支, 如果没有其他并行开发不同期上线要求, 都可以在此版本进行开发, 阶段开发完成后, 需要是合并到 master 分支, 准备上线</li></ul></li><li>feature/xxxx <ul><li>从 develop 创建的分支, 一般是同期并行开发, 但不同期上线时创建的分支, 分支上的研发任务完成后合并到 develop 分支</li></ul></li><li>hotfix/xxxx <ul><li>从 master 派生的分支, 一般作为线上bug修复使用, 修复完成后需要合并到 master, test, develop 分支</li><li>还有一些其他分支, 在此不再详述, 例如test分支(用于代码测试), pre分支(预上线分支)等等</li></ul></li></ul><p><img src="'+o+'" alt="91f0a7691c990105ce2edc25a76362a6693f0c9c" data-fancybox="gallery" loading="lazy"></p><p>以上规范, 请优先遵守自己公司的开发规范, 如果公司没有, 推荐请按照以下流程进行分支管理</p>',29)]))}const g=e(r,[["render",c]]);export{m as __pageData,g as default};
