import{_ as t,C as l,c as p,o as a,a6 as i,b as r,w as e,a as h,G as E,a7 as d}from"./chunks/framework.BQ10fS7j.js";const b=JSON.parse('{"title":"表达式和语句","description":"","frontmatter":{},"headers":[],"relativePath":"Docs/Knowledge/ProgrammingLanguage/JavaScript/ExpressionsAndStatements.md","filePath":"Docs/Knowledge/ProgrammingLanguage/JavaScript/ExpressionsAndStatements.md","lastUpdated":1742722027000}'),o={name:"Docs/Knowledge/ProgrammingLanguage/JavaScript/ExpressionsAndStatements.md"};function k(c,s,B,A,m,g){const n=l("Mermaid");return a(),p("div",null,[s[1]||(s[1]=i(`<h1 id="表达式和语句" tabindex="-1">表达式和语句 <a class="header-anchor" href="#表达式和语句" aria-label="Permalink to &quot;表达式和语句&quot;">​</a></h1><h2 id="表达式" tabindex="-1">表达式 <a class="header-anchor" href="#表达式" aria-label="Permalink to &quot;表达式&quot;">​</a></h2><p>表达式是可以被求值的代码, JS引擎会将其计算出一个结果</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这些可以被求值的都是表达式</p><h2 id="语句" tabindex="-1">语句 <a class="header-anchor" href="#语句" aria-label="Permalink to &quot;语句&quot;">​</a></h2><p>语句是一段可以执行的代码</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这些可以执行的代码都是语句</p><p>在某些情况下, 表达式也可以理解为语句, 因为它是在计算结果, 但不是必要的成分.例如<code>continue</code>语句</p><h3 id="三大流程控制语句" tabindex="-1">三大流程控制语句 <a class="header-anchor" href="#三大流程控制语句" aria-label="Permalink to &quot;三大流程控制语句&quot;">​</a></h3><p>以前写的代码, 写几句, 就从上往下执行几句, 这种叫顺序循环</p><p>有的时候要根据条件选择执行代码, 这种就叫分支结构</p><p>某段代码被重复执行, 就叫循环结构</p>`,14)),(a(),r(d,null,{default:e(()=>[E(n,{id:"mermaid-38",class:"mermaid",graph:"flowchart%20TD%3B%20%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%20--%3E%20%E9%A1%BA1%5B%E4%BB%A3%E7%A0%811%5D%20--%3E%20%E9%A1%BA2%5B%E4%BB%A3%E7%A0%812%5D%20--%3E%20%E9%A1%BA3%5B%E4%BB%A3%E7%A0%813%5D%3B%20%E5%88%861%20--%3E%20%7C%E4%B8%8D%E6%BB%A1%E8%B6%B3%7C%20%E5%88%863%3B%20%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%20--%3E%20%E5%88%861%5B%E4%BB%A3%E7%A0%811%5D%20--%3E%20%7C%E6%BB%A1%E8%B6%B3%E6%9D%A1%E4%BB%B6%7C%20%E5%88%862%5B%E4%BB%A3%E7%A0%812%5D%20--%3E%20%E5%88%863%5B%E4%BB%A3%E7%A0%813%5D%3B%20%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%20--%3E%20%E5%BE%AA1%5B%E4%BB%A3%E7%A0%811%5D%20--%3E%20%E5%BE%AA2(%E9%87%8D%E5%A4%8D%E4%BB%A3%E7%A0%81)%20--%3E%20%7C%E6%89%A7%E8%A1%8C%E5%A4%9A%E6%AC%A1%7C%20%E5%BE%AA3%5B%E4%BB%A3%E7%A0%813%5D%0A"})]),fallback:e(()=>s[0]||(s[0]=[h(" Loading... ")])),_:1})),s[2]||(s[2]=i('<h2 id="分支语句" tabindex="-1">分支语句 <a class="header-anchor" href="#分支语句" aria-label="Permalink to &quot;分支语句&quot;">​</a></h2><p>分支语句可以让我们有<strong>选择性</strong>的执行想要的代码</p><p>分支语句包含</p><ul><li><a href="./IfStatement.html">If分支语句</a></li><li><a href="./TernaryOperator.html">三元运算符</a></li><li><a href="./SwitchStatement.html">Switch语句</a></li></ul>',4))])}const C=t(o,[["render",k]]);export{b as __pageData,C as default};
