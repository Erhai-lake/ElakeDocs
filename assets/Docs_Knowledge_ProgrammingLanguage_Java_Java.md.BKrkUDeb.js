import{_ as t,c as r,o,a6 as n}from"./chunks/framework.ClVMjeck.js";const p=JSON.parse('{"title":"前言","description":"","frontmatter":{},"headers":[],"relativePath":"Docs/Knowledge/ProgrammingLanguage/Java/Java.md","filePath":"Docs/Knowledge/ProgrammingLanguage/Java/Java.md","lastUpdated":1744027156000}'),s={name:"Docs/Knowledge/ProgrammingLanguage/Java/Java.md"};function i(l,a,e,g,v,c){return o(),r("div",null,[...a[0]||(a[0]=[n('<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">提示</p><p>Java是一门高级语言, 你既然在看了, 那就说明你学习过了其他编程语言</p><p>如果没有, 还请先去学习例如<strong>JS</strong>, <strong>Python</strong>等</p><p>Java不是刚来到编程世界的新手该学习的语言</p><p>虽然这不是什么硬性要求, 但是接下来的文档, 有基础会很好理解</p><p>强调:这是一个建议或指导!</p></div><p><strong>Java</strong>是一种广泛使用的, 跨平台的, 面向对象的编程语言</p><p>由<strong>Sun Microsystems公司</strong>(现已被<strong>Oracle公司</strong>收购)在1995年发布, Java被设计为具有尽可能少的实现依赖性, 这使得Java应用能够在任何支持Java虚拟机(JVM)的设备上运行</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p>普遍认同Java联合创始人之一:詹姆斯·高斯林(James Gosling)为Java之父</p></div><h2 id="主要特点" tabindex="-1">主要特点 <a class="header-anchor" href="#主要特点" aria-label="Permalink to &quot;主要特点&quot;">​</a></h2><ol><li><strong>跨平台性</strong>: Java的口号是<strong>一次编写, 到处运行</strong>.Java程序被编译成一种叫做<strong>字节码</strong>(Bytecode)的中间形式, 然后可以在任何安装了Java虚拟机的平台上运行</li><li><strong>面向对象</strong>: Java是一门纯粹的面向对象编程语言, 它几乎所有的功能都是通过对象和类来实现的</li><li><strong>简单性</strong>: Java的设计目标是易于学习, 使用和实现.它去掉了C++中容易引起错误的指针等概念</li><li><strong>安全性</strong>: Java设计之初就考虑了网络应用的安全性, 因此它提供了安全机制来防止恶意代码</li><li><strong>体系结构中立</strong>: Java编译的字节码可以在任何平台的JVM上运行, 这保证了体系结构的中立性</li><li><strong>多线程</strong>: Java内置了对多线程的支持, 这允许开发者创建能够同时执行多个任务的程序</li></ol><h2 id="应用领域" tabindex="-1">应用领域 <a class="header-anchor" href="#应用领域" aria-label="Permalink to &quot;应用领域&quot;">​</a></h2><ul><li><strong>企业级应用</strong>: Java在企业级应用开发中非常流行, 特别是在大型, 分布式, 多层次的网络应用中</li><li><strong>Android应用开发</strong>: Java是Android操作系统的主要开发语言</li><li><strong>Web应用和服务端程序</strong>: Java提供了丰富的库来支持Web应用和服务端程序的开发</li><li><strong>嵌入式系统和物联网</strong>: Java由于其稳定性和跨平台特性, 在嵌入式系统和物联网设备中也有应用</li></ul><h2 id="主要版本" tabindex="-1">主要版本 <a class="header-anchor" href="#主要版本" aria-label="Permalink to &quot;主要版本&quot;">​</a></h2><ul><li><strong>Java SE(Standard Edition)</strong>: 提供了桌面应用程序, 服务器端应用程序的基础</li><li><strong>Java EE(Enterprise Edition)</strong>: 为企业环境提供了额外的库, 如分布式计算和Web服务</li><li><strong>Java ME(Micro Edition)</strong>: 用于开发移动设备和嵌入式设备上的应用程序</li></ul><h2 id="编程范式" tabindex="-1">编程范式 <a class="header-anchor" href="#编程范式" aria-label="Permalink to &quot;编程范式&quot;">​</a></h2><p>Java支持多种编程范式, 例如:</p><ul><li><strong>面向对象编程(OOP)</strong>: Java的核心特性, 包括封装, 继承和多态</li><li><strong>泛型编程</strong>: Java 5引入了泛型, 允许在编码时使用类型参数</li><li><strong>函数式编程</strong>: Java 8引入了Lambda表达式, 增强了函数式编程的能力</li></ul><p>Java因其稳定性, 成熟的开发生态和广泛的应用场景, 在全球范围内有着庞大的开发者社区, 并且持续在新的技术领域(如云计算, 大数据等)中发挥着重要作用</p><h2 id="javascript和java" tabindex="-1">JavaScript和Java <a class="header-anchor" href="#javascript和java" aria-label="Permalink to &quot;JavaScript和Java&quot;">​</a></h2><p><strong>JavaScript</strong>和<strong>Java</strong>有一些共性, 但是在另一些方面有着根本性区别.<strong>JavaScript</strong>语言类似<strong>Java</strong>但是并没有<strong>Java</strong>的静态类型和强类型检查特性.<strong>JavaScript</strong>遵循了<strong>Java</strong>的表达式语法, 命名规范以及基础流程控制, 这也是<strong>JavaScript</strong>从<strong>LiveScript</strong>更名的原因.(除了上面说的共性外<strong>JavaScript</strong>和<strong>Java</strong>仅仅只是蹭热度的关系)</p><p>Ps:说了这么多, 反正只用知道, 这两B玩意没任何关系, 名字也只是因为历史原因冲突的</p><h2 id="lvav" tabindex="-1">Lvav <a class="header-anchor" href="#lvav" aria-label="Permalink to &quot;Lvav&quot;">​</a></h2><p>Lvav说的就是Java, 为什么?我也不知道...</p>',20)])])}const d=t(s,[["render",i]]);export{p as __pageData,d as default};
