import{_ as a,c as n,o as i,a6 as e}from"./chunks/framework.BQ10fS7j.js";const l="/assets/fda3656db634c564a2ace6ff4166dc45f31fd31d.xqQ5sSa9.png",E=JSON.parse('{"title":"输入输出","description":"","frontmatter":{},"headers":[],"relativePath":"Docs/Knowledge/ProgrammingLanguage/Java/InputOutput.md","filePath":"Docs/Knowledge/ProgrammingLanguage/Java/InputOutput.md","lastUpdated":1752161555000}'),t={name:"Docs/Knowledge/ProgrammingLanguage/Java/InputOutput.md"};function p(r,s,h,k,c,d){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="输入输出" tabindex="-1">输入输出 <a class="header-anchor" href="#输入输出" aria-label="Permalink to &quot;输入输出&quot;">​</a></h1><ul><li>输入: 程序通过标准输入读取数据. 通过Java提供的<strong>Scanner</strong>类来实现. 例如: <code>Scanner scanner = new Scanner(System.in);</code></li><li>输出: 程序通过标准输出打印数据. 通过Java提供的<strong>System.out</strong>类来实现. 例如: <code>System.out.println(&quot;Hello, World!&quot;);</code></li></ul><p><strong>Scanner</strong>是Java提供的一个用于获取输入的类. 通过它可以方便地读取用户输入的数据.</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p><strong>API(Application Programming Interface: 应用程序编程接口)</strong></p><ul><li>Java写好的类库和接口, 供开发者调用和使用.</li><li>通过API, 开发者可以方便地实现各种功能, 而无需关心底层实现细节.</li></ul><p><a href="https://www.oracle.com/java/technologies/javase-jdk21-doc-downloads.html" target="_blank" rel="noreferrer">下载 Java API 文档</a></p></div><p>输出很简单, 这里最主要的是输入.</p><h2 id="输入" tabindex="-1">输入 <a class="header-anchor" href="#输入" aria-label="Permalink to &quot;输入&quot;">​</a></h2><ol><li>导包: 告诉编译器使用Scanner类, 在代码的最上方添加以下代码: <code>import java.util.Scanner;</code></li><li>创建Scanner对象: 使用Scanner类的构造方法创建一个Scanner对象, 代码如下: <code>Scanner scanner = new Scanner(System.in);</code></li><li>读取输入: 使用Scanner对象的nextLine()方法读取一行输入, 代码如下: <code>String input = scanner.nextLine();</code></li><li>关闭Scanner: 使用完Scanner对象后, 应该调用其close()方法关闭它, 代码如下: <code>scanner.close();</code></li><li>处理输入: 对读取到的输入进行处理, 例如: <code>System.out.println(&quot;您输入的内容是: &quot; + input);</code></li></ol><h3 id="完整例子" tabindex="-1">完整例子 <a class="header-anchor" href="#完整例子" aria-label="Permalink to &quot;完整例子&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Scanner;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建Scanner对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Scanner scanner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.in);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 读取输入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请输入内容: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scanner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 关闭Scanner</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scanner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理输入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;您输入的内容是: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><img src="`+l+'" alt="fda3656db634c564a2ace6ff4166dc45f31fd31d" data-fancybox="gallery" loading="lazy"></p><h3 id="小技巧" tabindex="-1">小技巧 <a class="header-anchor" href="#小技巧" aria-label="Permalink to &quot;小技巧&quot;">​</a></h3><p>在IDEA中, 通常不需要手动导包, 当你敲下<code>Scanner scanner = new Scanner(System.in);</code>时, IDE会自动为你导入所需的包.</p><p>如果没有, 可以通过鼠标悬浮在<code>Scanner</code>上, 然后使用快捷键<code>Alt + Enter</code>来快速导入缺失的包.</p>',13)]))}const g=a(t,[["render",p]]);export{E as __pageData,g as default};
