import{_ as a,c as i,o as e,a6 as n}from"./chunks/framework.X-bX-Y7_.js";const t="/assets/e4a2188c6741c47255e04d3eefb1f219cdb53667.DYSHBnkh.gif",g=JSON.parse('{"title":"定时器-延时函数","description":"","frontmatter":{},"headers":[],"relativePath":"Docs/Knowledge/ProgrammingLanguage/JavaScript/TimerDelayFunction.md","filePath":"Docs/Knowledge/ProgrammingLanguage/JavaScript/TimerDelayFunction.md","lastUpdated":1752160215000}'),l={name:"Docs/Knowledge/ProgrammingLanguage/JavaScript/TimerDelayFunction.md"};function p(r,s,h,o,d,c){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="定时器-延时函数" tabindex="-1">定时器-延时函数 <a class="header-anchor" href="#定时器-延时函数" aria-label="Permalink to &quot;定时器-延时函数&quot;">​</a></h1><p>JS内置的一个用来让代码延迟执行的函数</p><p><code>setTimeout(函数, 延迟毫秒数)</code></p><p><code>setTimeout</code>仅执行一次, 所以可以理解为把一段代码延迟执行</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;开始计时&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;时间到了&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+t+'" alt="e4a2188c6741c47255e04d3eefb1f219cdb53667" data-fancybox="gallery" loading="lazy"></p><p>和间歇函数一样有返回值, 返回定时器ID</p><p>使用<code>clearTimeout(定时器ID)</code>关闭定时器, 这里不在过多赘述, 可以翻<a href="./TimerIntervalFunction.html">定时器-间歇函数</a>的看</p>',8)]))}const E=a(l,[["render",p]]);export{g as __pageData,E as default};
